{
    "metadata":{
        "timestamp":"2024-11-14T12:54:26Z",
        "authors":[],
        "tools":{
            "components":[
                {
                    "data":[
                        {
                            "name":"CLI configuration flags",
                            "type":"configuration",
                            "contents":{
                                "attachment":{
                                    "content":"--sbom ./priv/input/sbom.json --test ./priv/input/tests/ --output sscg.json --authors "
                                }
                            }
                        }
                    ],
                    "name":"ReSCALE SSCG Generator",
                    "type":"application",
                    "version":"0.1.0",
                    "description":"A ReSCALE certified tool to generate SSCGs",
                    "hashes":[
                        {
                            "content":"2fd4e1c67a2d28fced849ee1bb76e7391b93eb12",
                            "alg":"SHA-1"
                        }
                    ],
                    "purl":"pkg:hex/sscg_generator@0.1.0"
                },
                {
                    "data":[
                        {
                            "name":"Docker Environment",
                            "type":"configuration",
                            "contents":{
                                "attachment":{
                                    "content":"RESCALE_STATIC_ANALYSIS_LANG=erlang\nRESCALE_DRY_RUN=false"
                                }
                            }
                        }
                    ],
                    "name":"ReSCALE Static Code Analysis Module",
                    "type":"container",
                    "version":"1.0.0",
                    "description":"A ReSCALE certified container to execute static testing",
                    "hashes":[
                        {
                            "content":"35d1c8f259129dc800ec8e073bb68f995424619c",
                            "alg":"SHA-1"
                        }
                    ],
                    "purl":"pkg:docker/static_code_analysis_module@1.0.0"
                }
            ]
        }
    },
    "bomFormat":"CycloneDX",
    "declarations":{
        "targets":{
            "components":[]
        },
        "evidence":[
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"Memory Error in Line 2.\n"
                        }
                    }
                },
                "description":"Vulnerability found in example1.txt",
                "bom-ref":"Evidence in example1.txt"
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"Test about abc.c file, \nMemory Error in Line 20323.\n"
                        }
                    }
                },
                "description":"Vulnerability found in example2.txt",
                "bom-ref":"Evidence in example2.txt"
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"clock_get_ticks_per_second() -> erlang:nif_error(\"\"NIF library not loaded\"\").\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example2.csv: function \"clock_get_ticks_per_second\" starting at line 37",
                "bom-ref":"Evidence in codeBERT_example2.csv: Function \"clock_get_ticks_per_second\" in line 37."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"clock_get_tod() ->\n    {Year, Month, Day, Hour, Minute, Second, Ticks} = clock_get_tod_nif(),\n\n    {{{Year, Month, Day}, {Hour, Minute, Second}}, Ticks}.\n\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"clock_get_tod\" starting at line 50",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"clock_get_tod\" in line 50."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"clock_set({{{Year, Month, Day}, {Hour, Minute, Second}}, Ticks}) ->\n    clock_set_nif({Year, Month, Day, Hour, Minute, Second, Ticks}).\n\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"clock_set\" starting at line 58",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"clock_set\" in line 58."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"unmount(Path) ->\n    unmount_nif([Path, 0]).\n\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"unmount\" starting at line 65",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"unmount\" in line 65."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"write_file_to_device(FilePath, DevicePath) ->\n    write_file_to_device(FilePath, DevicePath, ?DEFAULT_READ_CHUNK_SIZE, ?DEFAULT_WRITE_CHUNK_SIZE).\n\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"write_file_to_device\" starting at line 71",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"write_file_to_device\" in line 71."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"write_file_to_device(FilePath, DevicePath, ReadChunkSize, WriteChunkSize) ->\n    case file:open(FilePath, [read, binary, compressed]) of\n\n        {ok, Fd} ->\n\n            try\n\n                read_write_loop(Fd, DevicePath, ReadChunkSize, WriteChunkSize, 0)\n\n            after\n\n                file:close(Fd)\n\n            end;\n\n        Error ->\n\n            Error\n\n    end.\n\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"write_file_to_device\" starting at line 77",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"write_file_to_device\" in line 77."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"pwrite(DevicePath, Buffer, Offset) ->\n    pwrite_nif([DevicePath, 0], [Buffer], Offset).\n\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"pwrite\" starting at line 99",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"pwrite\" in line 99."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"on_load() -> ?NIF_LOAD.\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"on_load\" starting at line 105",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"on_load\" in line 105."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"unmount_nif(Path) -> ?NIF_STUB([Path]).\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"unmount_nif\" starting at line 113",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"unmount_nif\" in line 113."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"read_write_loop(Fd, DevicePath, ReadChunkSize, WriteChunkSize, BytesReadTotal) ->\n    case file:read(Fd, ReadChunkSize) of\n\n        {ok, ReadChunk} ->\n\n            case write_loop(DevicePath, ReadChunk, WriteChunkSize, BytesReadTotal, 0) of\n\n                {ok, ChunkBytesWritten} ->\n\n                    read_write_loop(Fd, DevicePath, ReadChunkSize, WriteChunkSize, BytesReadTotal + ChunkBytesWritten);\n\n                Error ->\n\n                    {error, BytesReadTotal, Error}\n\n            end;\n\n        eof ->\n\n            {ok, BytesReadTotal};\n\n        Error ->\n\n            {error, BytesReadTotal, Error}\n\n    end.\n\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"read_write_loop\" starting at line 118",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"read_write_loop\" in line 118."
            },
            {
                "data":{
                    "contents":{
                        "attachment":{
                            "content":"\"write_loop(DevicePath, Chunk, WriteChunkSize, Offset, ChunkBytesWritten) ->\n    case byte_size(Chunk) =< WriteChunkSize of\n\n        true ->\n\n            case pwrite(DevicePath, Chunk, Offset) of\n\n                {ok, BytesWritten} ->\n\n                    {ok, ChunkBytesWritten + BytesWritten};\n\n                Error ->\n\n                    Error\n\n            end;\n\n        false ->\n\n            <<WriteChunk:WriteChunkSize/binary, ChunkRest/binary>> = Chunk,\n\n            case pwrite(DevicePath, WriteChunk, Offset) of\n\n                {ok, BytesWritten} ->\n\n                    write_loop(DevicePath, ChunkRest, WriteChunkSize, Offset + BytesWritten, ChunkBytesWritten + BytesWritten);\n\n                Error ->\n\n                    Error\n\n            end\n\n    end.\n\n\""
                        }
                    }
                },
                "description":"Vulnerability found in codeBERT_example1.csv: function \"write_loop\" starting at line 133",
                "bom-ref":"Evidence in codeBERT_example1.csv: Function \"write_loop\" in line 133."
            }
        ],
        "claims":[
            {
                "evidence":[
                    "Evidence in example1.txt"
                ],
                "bom-ref":"Claim: example1.txt has found a vulnerability"
            },
            {
                "evidence":[
                    "Evidence in example2.txt"
                ],
                "bom-ref":"Claim: example2.txt has found a vulnerability"
            },
            {
                "evidence":[
                    "Evidence in codeBERT_example2.csv: Function \"clock_get_ticks_per_second\" in line 37."
                ],
                "bom-ref":"Claim: codeBERT_example2.csv has found 1 vulnerabilities"
            },
            {
                "evidence":[
                    "Evidence in codeBERT_example1.csv: Function \"clock_get_tod\" in line 50.",
                    "Evidence in codeBERT_example1.csv: Function \"clock_set\" in line 58.",
                    "Evidence in codeBERT_example1.csv: Function \"unmount\" in line 65.",
                    "Evidence in codeBERT_example1.csv: Function \"write_file_to_device\" in line 71.",
                    "Evidence in codeBERT_example1.csv: Function \"write_file_to_device\" in line 77.",
                    "Evidence in codeBERT_example1.csv: Function \"pwrite\" in line 99.",
                    "Evidence in codeBERT_example1.csv: Function \"on_load\" in line 105.",
                    "Evidence in codeBERT_example1.csv: Function \"unmount_nif\" in line 113.",
                    "Evidence in codeBERT_example1.csv: Function \"read_write_loop\" in line 118.",
                    "Evidence in codeBERT_example1.csv: Function \"write_loop\" in line 133."
                ],
                "bom-ref":"Claim: codeBERT_example1.csv has found 10 vulnerabilities"
            }
        ],
        "attestations":[
            {
                "map":[
                    {
                        "counterClaims":[],
                        "requirement":"https://rescale-project.eu/standard/1.0.0/conformance/complete"
                    }
                ],
                "assessor":"Producer Reference",
                "summary":"Mapping of Requirements to Claims"
            }
        ]
    },
    "definitions":{
        "standards":[
            {
                "name":"The ReSCALE Standard",
                "version":"1.0.0",
                "description":"The ReSCALE Standard describes a workflow to create a Trusted BOM (TBOM)",
                "bom-ref":"https://rescale-project.eu/standard/1.0.0",
                "requirements":[
                    {
                        "title":"Full conformance with ReSCALE's 'complete' profile, e.g. complete absence of findings",
                        "bom-ref":"https://rescale-project.eu/standard/1.0.0/conformance/complete",
                        "identifier":"/rescale/1.0.0/conformance/complete"
                    }
                ]
            }
        ]
    },
    "serialNumber":"urn:uuid:73ef27a6-b4c5-424c-a79f-f45f1da7db6f",
    "specVersion":"1.6"
}